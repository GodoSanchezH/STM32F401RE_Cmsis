
Projecto11_SystickInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000538  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  4 .ARM          00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006cc  080006cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080006d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080006d4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ee5  00000000  00000000  00010704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008fd  00000000  00000000  000135e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00013ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00014008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e33e  00000000  00000000  000140d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002300  00000000  00000000  0002240e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053b03  00000000  00000000  0002470e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00078211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002bc  00000000  00000000  00078264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006b4 	.word	0x080006b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006b4 	.word	0x080006b4

080001d4 <Init_Clock_HSI>:
 RCC->CFGR &= ~(RCC_CFGR_PPRE2);


}

void Init_Clock_HSI(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	  FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001de:	f023 0307 	bic.w	r3, r3, #7
 80001e2:	6013      	str	r3, [r2, #0]
	  FLASH->ACR |= FLASH_ACR_LATENCY_0WS; //~(1 << 2) & ~(1 << 1) & ~(1 << 0);//	000: Zero wait state
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001e6:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	6013      	str	r3, [r2, #0]
	  FLASH->ACR |=  (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8);	//  ART Accelerator
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001f2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80001f6:	6013      	str	r3, [r2, #0]
	  RCC->CR |= RCC_CR_HSION;				//	1: HSI oscillator ON
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <Init_Clock_HSI+0x50>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <Init_Clock_HSI+0x50>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
	  while( !(RCC->CR & RCC_CR_HSION) );	//	1: HSI oscillator ready
 8000204:	bf00      	nop
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <Init_Clock_HSI+0x50>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f9      	beq.n	8000206 <Init_Clock_HSI+0x32>


}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40023c00 	.word	0x40023c00
 8000224:	40023800 	.word	0x40023800

08000228 <GPIO_Init>:


#include "GPIO.h"

void GPIO_Init(uint8_t port,uint8_t pin,uint8_t dir,uint8_t speed,uint8_t opt)
{
 8000228:	b490      	push	{r4, r7}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4604      	mov	r4, r0
 8000230:	4608      	mov	r0, r1
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	4623      	mov	r3, r4
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4603      	mov	r3, r0
 800023c:	71bb      	strb	r3, [r7, #6]
 800023e:	460b      	mov	r3, r1
 8000240:	717b      	strb	r3, [r7, #5]
 8000242:	4613      	mov	r3, r2
 8000244:	713b      	strb	r3, [r7, #4]

	switch (port) {
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b03      	cmp	r3, #3
 800024a:	f000 808e 	beq.w	800036a <GPIO_Init+0x142>
 800024e:	2b03      	cmp	r3, #3
 8000250:	f300 80ce 	bgt.w	80003f0 <GPIO_Init+0x1c8>
 8000254:	2b01      	cmp	r3, #1
 8000256:	d002      	beq.n	800025e <GPIO_Init+0x36>
 8000258:	2b02      	cmp	r3, #2
 800025a:	d043      	beq.n	80002e4 <GPIO_Init+0xbc>
					    }
			 GPIOC->PUPDR |= (opt<<(2*pin));
		break;

	}
}
 800025c:	e0c8      	b.n	80003f0 <GPIO_Init+0x1c8>
			  RCC_AHB1ENR |= (1<<0);			//	Habilitamos el clock GPIOA
 800025e:	4b67      	ldr	r3, [pc, #412]	; (80003fc <GPIO_Init+0x1d4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a66      	ldr	r2, [pc, #408]	; (80003fc <GPIO_Init+0x1d4>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]
			  GPIOA->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida
 800026a:	4b65      	ldr	r3, [pc, #404]	; (8000400 <GPIO_Init+0x1d8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	7979      	ldrb	r1, [r7, #5]
 8000270:	79ba      	ldrb	r2, [r7, #6]
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	fa01 f202 	lsl.w	r2, r1, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a61      	ldr	r2, [pc, #388]	; (8000400 <GPIO_Init+0x1d8>)
 800027c:	430b      	orrs	r3, r1
 800027e:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 8000280:	797b      	ldrb	r3, [r7, #5]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d122      	bne.n	80002cc <GPIO_Init+0xa4>
				  GPIOA->MODER &= ~( dir << (2*pin+1));
 8000286:	4b5e      	ldr	r3, [pc, #376]	; (8000400 <GPIO_Init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	7979      	ldrb	r1, [r7, #5]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	3201      	adds	r2, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	4611      	mov	r1, r2
 800029a:	4a59      	ldr	r2, [pc, #356]	; (8000400 <GPIO_Init+0x1d8>)
 800029c:	400b      	ands	r3, r1
 800029e:	6013      	str	r3, [r2, #0]
				  GPIOA->OTYPER &= ~(1<<pin);	 //Push Pull
 80002a0:	4b57      	ldr	r3, [pc, #348]	; (8000400 <GPIO_Init+0x1d8>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	43d2      	mvns	r2, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a53      	ldr	r2, [pc, #332]	; (8000400 <GPIO_Init+0x1d8>)
 80002b2:	400b      	ands	r3, r1
 80002b4:	6053      	str	r3, [r2, #4]
				  GPIOA->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 80002b6:	4b52      	ldr	r3, [pc, #328]	; (8000400 <GPIO_Init+0x1d8>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	7939      	ldrb	r1, [r7, #4]
 80002bc:	79ba      	ldrb	r2, [r7, #6]
 80002be:	0052      	lsls	r2, r2, #1
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a4e      	ldr	r2, [pc, #312]	; (8000400 <GPIO_Init+0x1d8>)
 80002c8:	430b      	orrs	r3, r1
 80002ca:	6093      	str	r3, [r2, #8]
			  GPIOA->PUPDR |= (opt<<(2*pin));
 80002cc:	4b4c      	ldr	r3, [pc, #304]	; (8000400 <GPIO_Init+0x1d8>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	7c39      	ldrb	r1, [r7, #16]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	4611      	mov	r1, r2
 80002dc:	4a48      	ldr	r2, [pc, #288]	; (8000400 <GPIO_Init+0x1d8>)
 80002de:	430b      	orrs	r3, r1
 80002e0:	60d3      	str	r3, [r2, #12]
			break;
 80002e2:	e085      	b.n	80003f0 <GPIO_Init+0x1c8>
			  RCC_AHB1ENR |= (1<<1);			//	Habilitamos el clock GPIOB
 80002e4:	4b45      	ldr	r3, [pc, #276]	; (80003fc <GPIO_Init+0x1d4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a44      	ldr	r2, [pc, #272]	; (80003fc <GPIO_Init+0x1d4>)
 80002ea:	f043 0302 	orr.w	r3, r3, #2
 80002ee:	6013      	str	r3, [r2, #0]
			  GPIOB->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 80002f0:	4b44      	ldr	r3, [pc, #272]	; (8000404 <GPIO_Init+0x1dc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	7979      	ldrb	r1, [r7, #5]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	4a40      	ldr	r2, [pc, #256]	; (8000404 <GPIO_Init+0x1dc>)
 8000302:	430b      	orrs	r3, r1
 8000304:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 8000306:	797b      	ldrb	r3, [r7, #5]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d122      	bne.n	8000352 <GPIO_Init+0x12a>
				  GPIOB->MODER &= ~( dir << (2*pin+1));
 800030c:	4b3d      	ldr	r3, [pc, #244]	; (8000404 <GPIO_Init+0x1dc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	7979      	ldrb	r1, [r7, #5]
 8000312:	79ba      	ldrb	r2, [r7, #6]
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	3201      	adds	r2, #1
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	43d2      	mvns	r2, r2
 800031e:	4611      	mov	r1, r2
 8000320:	4a38      	ldr	r2, [pc, #224]	; (8000404 <GPIO_Init+0x1dc>)
 8000322:	400b      	ands	r3, r1
 8000324:	6013      	str	r3, [r2, #0]
			 			GPIOB->OTYPER &= ~(1<<pin);	 //Push Pull
 8000326:	4b37      	ldr	r3, [pc, #220]	; (8000404 <GPIO_Init+0x1dc>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	2101      	movs	r1, #1
 800032e:	fa01 f202 	lsl.w	r2, r1, r2
 8000332:	43d2      	mvns	r2, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a33      	ldr	r2, [pc, #204]	; (8000404 <GPIO_Init+0x1dc>)
 8000338:	400b      	ands	r3, r1
 800033a:	6053      	str	r3, [r2, #4]
			 			GPIOB->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <GPIO_Init+0x1dc>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	7939      	ldrb	r1, [r7, #4]
 8000342:	79ba      	ldrb	r2, [r7, #6]
 8000344:	0052      	lsls	r2, r2, #1
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	4611      	mov	r1, r2
 800034c:	4a2d      	ldr	r2, [pc, #180]	; (8000404 <GPIO_Init+0x1dc>)
 800034e:	430b      	orrs	r3, r1
 8000350:	6093      	str	r3, [r2, #8]
			  GPIOB->PUPDR |= (opt<<(2*pin));
 8000352:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <GPIO_Init+0x1dc>)
 8000354:	68db      	ldr	r3, [r3, #12]
 8000356:	7c39      	ldrb	r1, [r7, #16]
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	0052      	lsls	r2, r2, #1
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	4611      	mov	r1, r2
 8000362:	4a28      	ldr	r2, [pc, #160]	; (8000404 <GPIO_Init+0x1dc>)
 8000364:	430b      	orrs	r3, r1
 8000366:	60d3      	str	r3, [r2, #12]
			  break;
 8000368:	e042      	b.n	80003f0 <GPIO_Init+0x1c8>
			 RCC_AHB1ENR |= (1<<2);			    //	Habilitamos el clock GPIOC
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <GPIO_Init+0x1d4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a23      	ldr	r2, [pc, #140]	; (80003fc <GPIO_Init+0x1d4>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6013      	str	r3, [r2, #0]
			 GPIOC->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 8000376:	4b24      	ldr	r3, [pc, #144]	; (8000408 <GPIO_Init+0x1e0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	7979      	ldrb	r1, [r7, #5]
 800037c:	79ba      	ldrb	r2, [r7, #6]
 800037e:	0052      	lsls	r2, r2, #1
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	4611      	mov	r1, r2
 8000386:	4a20      	ldr	r2, [pc, #128]	; (8000408 <GPIO_Init+0x1e0>)
 8000388:	430b      	orrs	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
			 if(dir==1){
 800038c:	797b      	ldrb	r3, [r7, #5]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d122      	bne.n	80003d8 <GPIO_Init+0x1b0>
				 	 	GPIOC->MODER &= ~( dir << (2*pin+1));
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <GPIO_Init+0x1e0>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	7979      	ldrb	r1, [r7, #5]
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	3201      	adds	r2, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	43d2      	mvns	r2, r2
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a18      	ldr	r2, [pc, #96]	; (8000408 <GPIO_Init+0x1e0>)
 80003a8:	400b      	ands	r3, r1
 80003aa:	6013      	str	r3, [r2, #0]
						GPIOC->OTYPER &= ~(1<<pin);	 //Push Pull
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <GPIO_Init+0x1e0>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	79ba      	ldrb	r2, [r7, #6]
 80003b2:	2101      	movs	r1, #1
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <GPIO_Init+0x1e0>)
 80003be:	400b      	ands	r3, r1
 80003c0:	6053      	str	r3, [r2, #4]
						GPIOC->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <GPIO_Init+0x1e0>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	7939      	ldrb	r1, [r7, #4]
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <GPIO_Init+0x1e0>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6093      	str	r3, [r2, #8]
			 GPIOC->PUPDR |= (opt<<(2*pin));
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <GPIO_Init+0x1e0>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	7c39      	ldrb	r1, [r7, #16]
 80003de:	79ba      	ldrb	r2, [r7, #6]
 80003e0:	0052      	lsls	r2, r2, #1
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a07      	ldr	r2, [pc, #28]	; (8000408 <GPIO_Init+0x1e0>)
 80003ea:	430b      	orrs	r3, r1
 80003ec:	60d3      	str	r3, [r2, #12]
		break;
 80003ee:	bf00      	nop
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc90      	pop	{r4, r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023830 	.word	0x40023830
 8000400:	40020000 	.word	0x40020000
 8000404:	40020400 	.word	0x40020400
 8000408:	40020800 	.word	0x40020800

0800040c <Toggle_GPIO>:

			}
}

void Toggle_GPIO(uint8_t port,uint8_t pin)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	4613      	mov	r3, r2
 800041a:	71bb      	strb	r3, [r7, #6]
	switch (port) {
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d01c      	beq.n	800045c <Toggle_GPIO+0x50>
 8000422:	2b03      	cmp	r3, #3
 8000424:	dc25      	bgt.n	8000472 <Toggle_GPIO+0x66>
 8000426:	2b01      	cmp	r3, #1
 8000428:	d002      	beq.n	8000430 <Toggle_GPIO+0x24>
 800042a:	2b02      	cmp	r3, #2
 800042c:	d00b      	beq.n	8000446 <Toggle_GPIO+0x3a>
		case PC:
			GPIOC->ODR ^= (1<<pin);
			break;

	}
}
 800042e:	e020      	b.n	8000472 <Toggle_GPIO+0x66>
			GPIOA->ODR ^= (1<<pin);
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <Toggle_GPIO+0x74>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	79ba      	ldrb	r2, [r7, #6]
 8000436:	2101      	movs	r1, #1
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	4611      	mov	r1, r2
 800043e:	4a10      	ldr	r2, [pc, #64]	; (8000480 <Toggle_GPIO+0x74>)
 8000440:	404b      	eors	r3, r1
 8000442:	6153      	str	r3, [r2, #20]
			break;
 8000444:	e015      	b.n	8000472 <Toggle_GPIO+0x66>
			GPIOB->ODR ^= (1<<pin);
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <Toggle_GPIO+0x78>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	79ba      	ldrb	r2, [r7, #6]
 800044c:	2101      	movs	r1, #1
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <Toggle_GPIO+0x78>)
 8000456:	404b      	eors	r3, r1
 8000458:	6153      	str	r3, [r2, #20]
			break;
 800045a:	e00a      	b.n	8000472 <Toggle_GPIO+0x66>
			GPIOC->ODR ^= (1<<pin);
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <Toggle_GPIO+0x7c>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	79ba      	ldrb	r2, [r7, #6]
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a07      	ldr	r2, [pc, #28]	; (8000488 <Toggle_GPIO+0x7c>)
 800046c:	404b      	eors	r3, r1
 800046e:	6153      	str	r3, [r2, #20]
			break;
 8000470:	bf00      	nop
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40020000 	.word	0x40020000
 8000484:	40020400 	.word	0x40020400
 8000488:	40020800 	.word	0x40020800

0800048c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049a:	2b00      	cmp	r3, #0
 800049c:	db0c      	blt.n	80004b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	f003 021f 	and.w	r2, r3, #31
 80004a4:	4907      	ldr	r1, [pc, #28]	; (80004c4 <__NVIC_ClearPendingIRQ+0x38>)
 80004a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004aa:	095b      	lsrs	r3, r3, #5
 80004ac:	2001      	movs	r0, #1
 80004ae:	fa00 f202 	lsl.w	r2, r0, r2
 80004b2:	3360      	adds	r3, #96	; 0x60
 80004b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	e000e100 	.word	0xe000e100

080004c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	db0a      	blt.n	80004f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	490c      	ldr	r1, [pc, #48]	; (8000514 <__NVIC_SetPriority+0x4c>)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	0112      	lsls	r2, r2, #4
 80004e8:	b2d2      	uxtb	r2, r2
 80004ea:	440b      	add	r3, r1
 80004ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004f0:	e00a      	b.n	8000508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4908      	ldr	r1, [pc, #32]	; (8000518 <__NVIC_SetPriority+0x50>)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	f003 030f 	and.w	r3, r3, #15
 80004fe:	3b04      	subs	r3, #4
 8000500:	0112      	lsls	r2, r2, #4
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	440b      	add	r3, r1
 8000506:	761a      	strb	r2, [r3, #24]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000e100 	.word	0xe000e100
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <SysTickConfig>:
#include "SysTick.h"


static __IO uint32_t mstick;

void SysTickConfig(uint32_t SysTick_Val){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

	//Limpiamos el buffer
	SysTick->CTRL = 0;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <SysTickConfig+0x30>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]

	//cargar el valor
	SysTick->LOAD = SysTick_Val-1;
 800052a:	4a08      	ldr	r2, [pc, #32]	; (800054c <SysTickConfig+0x30>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3b01      	subs	r3, #1
 8000530:	6053      	str	r3, [r2, #4]
	//0 a 83999

	SysTick->CTRL =  (1 << 2) | 		//	1 = processor clock.
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <SysTickConfig+0x30>)
 8000534:	2207      	movs	r2, #7
 8000536:	601a      	str	r2, [r3, #0]
	          	  	 (1 << 1) | 		//	1 = counting down to zero asserts the SysTick exception request
					 (1 << 0);			//	1 = counter enabled.

	__NVIC_SetPriority(SysTick_IRQn,0); //prioridad 0
 8000538:	2100      	movs	r1, #0
 800053a:	f04f 30ff 	mov.w	r0, #4294967295
 800053e:	f7ff ffc3 	bl	80004c8 <__NVIC_SetPriority>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	e000e010 	.word	0xe000e010

08000550 <SysTick_Handler>:



void SysTick_Handler(void){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	__NVIC_ClearPendingIRQ(SysTick_IRQn);
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f7ff ff98 	bl	800048c <__NVIC_ClearPendingIRQ>
	msIncTicks();
 800055c:	f000 f802 	bl	8000564 <msIncTicks>


}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <msIncTicks>:

void msIncTicks(void){
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	mstick++;
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <msIncTicks+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a03      	ldr	r2, [pc, #12]	; (800057c <msIncTicks+0x18>)
 8000570:	6013      	str	r3, [r2, #0]
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	2000001c 	.word	0x2000001c

08000580 <msGetTicks>:

uint32_t msGetTicks(void){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

	return mstick;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <msGetTicks+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000001c 	.word	0x2000001c

08000598 <__delay_ms>:

void __delay_ms(uint32_t delay){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	uint32_t starTime = msGetTicks();
 80005a0:	f7ff ffee 	bl	8000580 <msGetTicks>
 80005a4:	60f8      	str	r0, [r7, #12]
	while((msGetTicks() - starTime) < delay);
 80005a6:	bf00      	nop
 80005a8:	f7ff ffea 	bl	8000580 <msGetTicks>
 80005ac:	4602      	mov	r2, r0
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8f7      	bhi.n	80005a8 <__delay_ms+0x10>

}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <main>:
#include "main.h"
#include "Clock_Config.h"
#include "GPIO.h"
#include "SysTick.h"

int main(void){
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af02      	add	r7, sp, #8

Init_Clock_HSI();
 80005c8:	f7ff fe04 	bl	80001d4 <Init_Clock_HSI>
SysTickConfig(16000);
 80005cc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80005d0:	f7ff ffa4 	bl	800051c <SysTickConfig>

GPIO_Init(PA, 5, Output, OUT2, No_pull_up_pull_down);
 80005d4:	2300      	movs	r3, #0
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	2201      	movs	r2, #1
 80005dc:	2105      	movs	r1, #5
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff fe22 	bl	8000228 <GPIO_Init>

for(;;){

Toggle_GPIO(PA, 5);
 80005e4:	2105      	movs	r1, #5
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ff10 	bl	800040c <Toggle_GPIO>
__delay_ms(100);
 80005ec:	2064      	movs	r0, #100	; 0x64
 80005ee:	f7ff ffd3 	bl	8000598 <__delay_ms>
Toggle_GPIO(PA, 5);
 80005f2:	e7f7      	b.n	80005e4 <main+0x22>

080005f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <SystemInit+0x20>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <SystemInit+0x20>)
 8000600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800061e:	490e      	ldr	r1, [pc, #56]	; (8000658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000634:	4c0b      	ldr	r4, [pc, #44]	; (8000664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000642:	f7ff ffd7 	bl	80005f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f000 f811 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800064a:	f7ff ffba 	bl	80005c2 <main>
  bx  lr    
 800064e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000650:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800065c:	080006d4 	.word	0x080006d4
  ldr r2, =_sbss
 8000660:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000664:	20000020 	.word	0x20000020

08000668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>
	...

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	080006cc 	.word	0x080006cc
 80006a8:	080006cc 	.word	0x080006cc
 80006ac:	080006cc 	.word	0x080006cc
 80006b0:	080006d0 	.word	0x080006d0

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
