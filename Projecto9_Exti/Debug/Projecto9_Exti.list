
Projecto9_Exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800073c  08000744  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800073c  0800073c  00010744  2**0
                  CONTENTS
  4 .ARM          00000000  0800073c  0800073c  00010744  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800073c  08000744  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800073c  0800073c  0001073c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000740  08000740  00010740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000744  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000744  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010744  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000313f  00000000  00000000  00010774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008b6  00000000  00000000  000138b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00014170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00014280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e33e  00000000  00000000  00014338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002258  00000000  00000000  00022676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053af1  00000000  00000000  000248ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000783bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000278  00000000  00000000  00078414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000724 	.word	0x08000724

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000724 	.word	0x08000724

080001d4 <Init_Clock_HSI>:
 RCC->CFGR &= ~(RCC_CFGR_PPRE2);


}

void Init_Clock_HSI(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	  FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001de:	f023 0307 	bic.w	r3, r3, #7
 80001e2:	6013      	str	r3, [r2, #0]
	  FLASH->ACR |= FLASH_ACR_LATENCY_0WS; //~(1 << 2) & ~(1 << 1) & ~(1 << 0);//	000: Zero wait state
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001e6:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	6013      	str	r3, [r2, #0]
	  FLASH->ACR |=  (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8);	//  ART Accelerator
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001f2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80001f6:	6013      	str	r3, [r2, #0]
	  RCC->CR |= RCC_CR_HSION;				//	1: HSI oscillator ON
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <Init_Clock_HSI+0x50>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <Init_Clock_HSI+0x50>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
	  while( !(RCC->CR & RCC_CR_HSION) );	//	1: HSI oscillator ready
 8000204:	bf00      	nop
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <Init_Clock_HSI+0x50>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f9      	beq.n	8000206 <Init_Clock_HSI+0x32>


}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40023c00 	.word	0x40023c00
 8000224:	40023800 	.word	0x40023800

08000228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	2b00      	cmp	r3, #0
 8000238:	db0b      	blt.n	8000252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	f003 021f 	and.w	r2, r3, #31
 8000240:	4907      	ldr	r1, [pc, #28]	; (8000260 <__NVIC_EnableIRQ+0x38>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	095b      	lsrs	r3, r3, #5
 8000248:	2001      	movs	r0, #1
 800024a:	fa00 f202 	lsl.w	r2, r0, r2
 800024e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000272:	2b00      	cmp	r3, #0
 8000274:	db0c      	blt.n	8000290 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	f003 021f 	and.w	r2, r3, #31
 800027c:	4907      	ldr	r1, [pc, #28]	; (800029c <__NVIC_ClearPendingIRQ+0x38>)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	2001      	movs	r0, #1
 8000286:	fa00 f202 	lsl.w	r2, r0, r2
 800028a:	3360      	adds	r3, #96	; 0x60
 800028c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000e100 	.word	0xe000e100

080002a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	db0a      	blt.n	80002ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	490c      	ldr	r1, [pc, #48]	; (80002ec <__NVIC_SetPriority+0x4c>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	0112      	lsls	r2, r2, #4
 80002c0:	b2d2      	uxtb	r2, r2
 80002c2:	440b      	add	r3, r1
 80002c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002c8:	e00a      	b.n	80002e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4908      	ldr	r1, [pc, #32]	; (80002f0 <__NVIC_SetPriority+0x50>)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 030f 	and.w	r3, r3, #15
 80002d6:	3b04      	subs	r3, #4
 80002d8:	0112      	lsls	r2, r2, #4
 80002da:	b2d2      	uxtb	r2, r2
 80002dc:	440b      	add	r3, r1
 80002de:	761a      	strb	r2, [r3, #24]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <External_Interrupt_Init>:

extern uint32_t flag;



void External_Interrupt_Init(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	// HABILITAMOS EL RELOJ
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <External_Interrupt_Init+0x6c>)
 80002fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fc:	4a18      	ldr	r2, [pc, #96]	; (8000360 <External_Interrupt_Init+0x6c>)
 80002fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000302:	6453      	str	r3, [r2, #68]	; 0x44
	// INTTERRUPCION PC13
	SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI13);
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <External_Interrupt_Init+0x70>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a16      	ldr	r2, [pc, #88]	; (8000364 <External_Interrupt_Init+0x70>)
 800030a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800030e:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <External_Interrupt_Init+0x70>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a13      	ldr	r2, [pc, #76]	; (8000364 <External_Interrupt_Init+0x70>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6153      	str	r3, [r2, #20]
	// NO ENMASCARAR
	EXTI->IMR |= EXTI_IMR_IM13;
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <External_Interrupt_Init+0x74>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a11      	ldr	r2, [pc, #68]	; (8000368 <External_Interrupt_Init+0x74>)
 8000322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000326:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= EXTI_EMR_EM13;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <External_Interrupt_Init+0x74>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <External_Interrupt_Init+0x74>)
 800032e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000332:	6053      	str	r3, [r2, #4]
	// DESCENDENT
	EXTI->FTSR |= EXTI_FTSR_TR13;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <External_Interrupt_Init+0x74>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <External_Interrupt_Init+0x74>)
 800033a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033e:	60d3      	str	r3, [r2, #12]
	// ASCENDETE DESHABILITADO
	EXTI->RTSR &= ~(EXTI_RTSR_TR13);
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <External_Interrupt_Init+0x74>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a08      	ldr	r2, [pc, #32]	; (8000368 <External_Interrupt_Init+0x74>)
 8000346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034a:	6093      	str	r3, [r2, #8]
	// PRIORIDAD
	NVIC_SetPriority(EXTI15_10_IRQn, 1);
 800034c:	2101      	movs	r1, #1
 800034e:	2028      	movs	r0, #40	; 0x28
 8000350:	f7ff ffa6 	bl	80002a0 <__NVIC_SetPriority>
	// ENABLE
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000354:	2028      	movs	r0, #40	; 0x28
 8000356:	f7ff ff67 	bl	8000228 <__NVIC_EnableIRQ>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800
 8000364:	40013800 	.word	0x40013800
 8000368:	40013c00 	.word	0x40013c00

0800036c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000370:	2028      	movs	r0, #40	; 0x28
 8000372:	f7ff ff77 	bl	8000264 <__NVIC_ClearPendingIRQ>
	EXTI->PR |= EXTI_PR_PR13;
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <EXTI15_10_IRQHandler+0x20>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a04      	ldr	r2, [pc, #16]	; (800038c <EXTI15_10_IRQHandler+0x20>)
 800037c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000380:	6153      	str	r3, [r2, #20]
	flag = 1;
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <EXTI15_10_IRQHandler+0x24>)
 8000384:	2201      	movs	r2, #1
 8000386:	601a      	str	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40013c00 	.word	0x40013c00
 8000390:	2000001c 	.word	0x2000001c

08000394 <GPIO_Init>:


#include "GPIO.h"

void GPIO_Init(uint8_t port,uint8_t pin,uint8_t dir,uint8_t speed,uint8_t opt)
{
 8000394:	b490      	push	{r4, r7}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4604      	mov	r4, r0
 800039c:	4608      	mov	r0, r1
 800039e:	4611      	mov	r1, r2
 80003a0:	461a      	mov	r2, r3
 80003a2:	4623      	mov	r3, r4
 80003a4:	71fb      	strb	r3, [r7, #7]
 80003a6:	4603      	mov	r3, r0
 80003a8:	71bb      	strb	r3, [r7, #6]
 80003aa:	460b      	mov	r3, r1
 80003ac:	717b      	strb	r3, [r7, #5]
 80003ae:	4613      	mov	r3, r2
 80003b0:	713b      	strb	r3, [r7, #4]

	switch (port) {
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	f000 808e 	beq.w	80004d6 <GPIO_Init+0x142>
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	f300 80ce 	bgt.w	800055c <GPIO_Init+0x1c8>
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d002      	beq.n	80003ca <GPIO_Init+0x36>
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d043      	beq.n	8000450 <GPIO_Init+0xbc>
					    }
			 GPIOC->PUPDR |= (opt<<(2*pin));
		break;

	}
}
 80003c8:	e0c8      	b.n	800055c <GPIO_Init+0x1c8>
			  RCC_AHB1ENR |= (1<<0);			//	Habilitamos el clock GPIOA
 80003ca:	4b67      	ldr	r3, [pc, #412]	; (8000568 <GPIO_Init+0x1d4>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a66      	ldr	r2, [pc, #408]	; (8000568 <GPIO_Init+0x1d4>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6013      	str	r3, [r2, #0]
			  GPIOA->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida
 80003d6:	4b65      	ldr	r3, [pc, #404]	; (800056c <GPIO_Init+0x1d8>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	7979      	ldrb	r1, [r7, #5]
 80003dc:	79ba      	ldrb	r2, [r7, #6]
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a61      	ldr	r2, [pc, #388]	; (800056c <GPIO_Init+0x1d8>)
 80003e8:	430b      	orrs	r3, r1
 80003ea:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 80003ec:	797b      	ldrb	r3, [r7, #5]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d122      	bne.n	8000438 <GPIO_Init+0xa4>
				  GPIOA->MODER &= ~( dir << (2*pin+1));
 80003f2:	4b5e      	ldr	r3, [pc, #376]	; (800056c <GPIO_Init+0x1d8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	7979      	ldrb	r1, [r7, #5]
 80003f8:	79ba      	ldrb	r2, [r7, #6]
 80003fa:	0052      	lsls	r2, r2, #1
 80003fc:	3201      	adds	r2, #1
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	43d2      	mvns	r2, r2
 8000404:	4611      	mov	r1, r2
 8000406:	4a59      	ldr	r2, [pc, #356]	; (800056c <GPIO_Init+0x1d8>)
 8000408:	400b      	ands	r3, r1
 800040a:	6013      	str	r3, [r2, #0]
				  GPIOA->OTYPER &= ~(1<<pin);	 //Push Pull
 800040c:	4b57      	ldr	r3, [pc, #348]	; (800056c <GPIO_Init+0x1d8>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	79ba      	ldrb	r2, [r7, #6]
 8000412:	2101      	movs	r1, #1
 8000414:	fa01 f202 	lsl.w	r2, r1, r2
 8000418:	43d2      	mvns	r2, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a53      	ldr	r2, [pc, #332]	; (800056c <GPIO_Init+0x1d8>)
 800041e:	400b      	ands	r3, r1
 8000420:	6053      	str	r3, [r2, #4]
				  GPIOA->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 8000422:	4b52      	ldr	r3, [pc, #328]	; (800056c <GPIO_Init+0x1d8>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	7939      	ldrb	r1, [r7, #4]
 8000428:	79ba      	ldrb	r2, [r7, #6]
 800042a:	0052      	lsls	r2, r2, #1
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a4e      	ldr	r2, [pc, #312]	; (800056c <GPIO_Init+0x1d8>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6093      	str	r3, [r2, #8]
			  GPIOA->PUPDR |= (opt<<(2*pin));
 8000438:	4b4c      	ldr	r3, [pc, #304]	; (800056c <GPIO_Init+0x1d8>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	7c39      	ldrb	r1, [r7, #16]
 800043e:	79ba      	ldrb	r2, [r7, #6]
 8000440:	0052      	lsls	r2, r2, #1
 8000442:	fa01 f202 	lsl.w	r2, r1, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a48      	ldr	r2, [pc, #288]	; (800056c <GPIO_Init+0x1d8>)
 800044a:	430b      	orrs	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
			break;
 800044e:	e085      	b.n	800055c <GPIO_Init+0x1c8>
			  RCC_AHB1ENR |= (1<<1);			//	Habilitamos el clock GPIOB
 8000450:	4b45      	ldr	r3, [pc, #276]	; (8000568 <GPIO_Init+0x1d4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a44      	ldr	r2, [pc, #272]	; (8000568 <GPIO_Init+0x1d4>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	6013      	str	r3, [r2, #0]
			  GPIOB->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 800045c:	4b44      	ldr	r3, [pc, #272]	; (8000570 <GPIO_Init+0x1dc>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	7979      	ldrb	r1, [r7, #5]
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a40      	ldr	r2, [pc, #256]	; (8000570 <GPIO_Init+0x1dc>)
 800046e:	430b      	orrs	r3, r1
 8000470:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 8000472:	797b      	ldrb	r3, [r7, #5]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d122      	bne.n	80004be <GPIO_Init+0x12a>
				  GPIOB->MODER &= ~( dir << (2*pin+1));
 8000478:	4b3d      	ldr	r3, [pc, #244]	; (8000570 <GPIO_Init+0x1dc>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	7979      	ldrb	r1, [r7, #5]
 800047e:	79ba      	ldrb	r2, [r7, #6]
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	3201      	adds	r2, #1
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	43d2      	mvns	r2, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a38      	ldr	r2, [pc, #224]	; (8000570 <GPIO_Init+0x1dc>)
 800048e:	400b      	ands	r3, r1
 8000490:	6013      	str	r3, [r2, #0]
			 			GPIOB->OTYPER &= ~(1<<pin);	 //Push Pull
 8000492:	4b37      	ldr	r3, [pc, #220]	; (8000570 <GPIO_Init+0x1dc>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	79ba      	ldrb	r2, [r7, #6]
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	43d2      	mvns	r2, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a33      	ldr	r2, [pc, #204]	; (8000570 <GPIO_Init+0x1dc>)
 80004a4:	400b      	ands	r3, r1
 80004a6:	6053      	str	r3, [r2, #4]
			 			GPIOB->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 80004a8:	4b31      	ldr	r3, [pc, #196]	; (8000570 <GPIO_Init+0x1dc>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	7939      	ldrb	r1, [r7, #4]
 80004ae:	79ba      	ldrb	r2, [r7, #6]
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a2d      	ldr	r2, [pc, #180]	; (8000570 <GPIO_Init+0x1dc>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6093      	str	r3, [r2, #8]
			  GPIOB->PUPDR |= (opt<<(2*pin));
 80004be:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <GPIO_Init+0x1dc>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	7c39      	ldrb	r1, [r7, #16]
 80004c4:	79ba      	ldrb	r2, [r7, #6]
 80004c6:	0052      	lsls	r2, r2, #1
 80004c8:	fa01 f202 	lsl.w	r2, r1, r2
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a28      	ldr	r2, [pc, #160]	; (8000570 <GPIO_Init+0x1dc>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	60d3      	str	r3, [r2, #12]
			  break;
 80004d4:	e042      	b.n	800055c <GPIO_Init+0x1c8>
			 RCC_AHB1ENR |= (1<<2);			    //	Habilitamos el clock GPIOC
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <GPIO_Init+0x1d4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <GPIO_Init+0x1d4>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	6013      	str	r3, [r2, #0]
			 GPIOC->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <GPIO_Init+0x1e0>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	7979      	ldrb	r1, [r7, #5]
 80004e8:	79ba      	ldrb	r2, [r7, #6]
 80004ea:	0052      	lsls	r2, r2, #1
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a20      	ldr	r2, [pc, #128]	; (8000574 <GPIO_Init+0x1e0>)
 80004f4:	430b      	orrs	r3, r1
 80004f6:	6013      	str	r3, [r2, #0]
			 if(dir==1){
 80004f8:	797b      	ldrb	r3, [r7, #5]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d122      	bne.n	8000544 <GPIO_Init+0x1b0>
				 	 	GPIOC->MODER &= ~( dir << (2*pin+1));
 80004fe:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <GPIO_Init+0x1e0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	7979      	ldrb	r1, [r7, #5]
 8000504:	79ba      	ldrb	r2, [r7, #6]
 8000506:	0052      	lsls	r2, r2, #1
 8000508:	3201      	adds	r2, #1
 800050a:	fa01 f202 	lsl.w	r2, r1, r2
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a18      	ldr	r2, [pc, #96]	; (8000574 <GPIO_Init+0x1e0>)
 8000514:	400b      	ands	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
						GPIOC->OTYPER &= ~(1<<pin);	 //Push Pull
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <GPIO_Init+0x1e0>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	79ba      	ldrb	r2, [r7, #6]
 800051e:	2101      	movs	r1, #1
 8000520:	fa01 f202 	lsl.w	r2, r1, r2
 8000524:	43d2      	mvns	r2, r2
 8000526:	4611      	mov	r1, r2
 8000528:	4a12      	ldr	r2, [pc, #72]	; (8000574 <GPIO_Init+0x1e0>)
 800052a:	400b      	ands	r3, r1
 800052c:	6053      	str	r3, [r2, #4]
						GPIOC->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <GPIO_Init+0x1e0>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	7939      	ldrb	r1, [r7, #4]
 8000534:	79ba      	ldrb	r2, [r7, #6]
 8000536:	0052      	lsls	r2, r2, #1
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <GPIO_Init+0x1e0>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6093      	str	r3, [r2, #8]
			 GPIOC->PUPDR |= (opt<<(2*pin));
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <GPIO_Init+0x1e0>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	7c39      	ldrb	r1, [r7, #16]
 800054a:	79ba      	ldrb	r2, [r7, #6]
 800054c:	0052      	lsls	r2, r2, #1
 800054e:	fa01 f202 	lsl.w	r2, r1, r2
 8000552:	4611      	mov	r1, r2
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <GPIO_Init+0x1e0>)
 8000556:	430b      	orrs	r3, r1
 8000558:	60d3      	str	r3, [r2, #12]
		break;
 800055a:	bf00      	nop
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bc90      	pop	{r4, r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023830 	.word	0x40023830
 800056c:	40020000 	.word	0x40020000
 8000570:	40020400 	.word	0x40020400
 8000574:	40020800 	.word	0x40020800

08000578 <Toggle_GPIO>:

			}
}

void Toggle_GPIO(uint8_t port,uint8_t pin)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	switch (port) {
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b03      	cmp	r3, #3
 800058c:	d01c      	beq.n	80005c8 <Toggle_GPIO+0x50>
 800058e:	2b03      	cmp	r3, #3
 8000590:	dc25      	bgt.n	80005de <Toggle_GPIO+0x66>
 8000592:	2b01      	cmp	r3, #1
 8000594:	d002      	beq.n	800059c <Toggle_GPIO+0x24>
 8000596:	2b02      	cmp	r3, #2
 8000598:	d00b      	beq.n	80005b2 <Toggle_GPIO+0x3a>
		case PC:
			GPIOC->ODR ^= (1<<pin);
			break;

	}
}
 800059a:	e020      	b.n	80005de <Toggle_GPIO+0x66>
			GPIOA->ODR ^= (1<<pin);
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <Toggle_GPIO+0x74>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <Toggle_GPIO+0x74>)
 80005ac:	404b      	eors	r3, r1
 80005ae:	6153      	str	r3, [r2, #20]
			break;
 80005b0:	e015      	b.n	80005de <Toggle_GPIO+0x66>
			GPIOB->ODR ^= (1<<pin);
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <Toggle_GPIO+0x78>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	79ba      	ldrb	r2, [r7, #6]
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <Toggle_GPIO+0x78>)
 80005c2:	404b      	eors	r3, r1
 80005c4:	6153      	str	r3, [r2, #20]
			break;
 80005c6:	e00a      	b.n	80005de <Toggle_GPIO+0x66>
			GPIOC->ODR ^= (1<<pin);
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <Toggle_GPIO+0x7c>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	79ba      	ldrb	r2, [r7, #6]
 80005ce:	2101      	movs	r1, #1
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <Toggle_GPIO+0x7c>)
 80005d8:	404b      	eors	r3, r1
 80005da:	6153      	str	r3, [r2, #20]
			break;
 80005dc:	bf00      	nop
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40020000 	.word	0x40020000
 80005f0:	40020400 	.word	0x40020400
 80005f4:	40020800 	.word	0x40020800

080005f8 <main>:
#include  "ExtInt.h"


uint32_t flag = 0;

int main(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af02      	add	r7, sp, #8

Init_Clock_HSI();
 80005fe:	f7ff fde9 	bl	80001d4 <Init_Clock_HSI>
External_Interrupt_Init();
 8000602:	f7ff fe77 	bl	80002f4 <External_Interrupt_Init>

GPIO_Init(PA, 5,Output,OUT2,No_pull_up_pull_down);
 8000606:	2300      	movs	r3, #0
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2201      	movs	r2, #1
 800060e:	2105      	movs	r1, #5
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff febf 	bl	8000394 <GPIO_Init>
GPIO_Init(PC, 13,Input, OUT2, No_pull_up_pull_down);
 8000616:	2300      	movs	r3, #0
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	210d      	movs	r1, #13
 8000620:	2003      	movs	r0, #3
 8000622:	f7ff feb7 	bl	8000394 <GPIO_Init>

for(;;){

		if(flag==1){
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <main+0x64>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1fb      	bne.n	8000626 <main+0x2e>
			Toggle_GPIO(PA, 5);
 800062e:	2105      	movs	r1, #5
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff ffa1 	bl	8000578 <Toggle_GPIO>
			for (uint32_t var = 0; var <=100000; var++);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e002      	b.n	8000642 <main+0x4a>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <main+0x68>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d9f8      	bls.n	800063c <main+0x44>
			Toggle_GPIO(PA, 5);
 800064a:	2105      	movs	r1, #5
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ff93 	bl	8000578 <Toggle_GPIO>
			flag=0;
 8000652:	4b02      	ldr	r3, [pc, #8]	; (800065c <main+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
		if(flag==1){
 8000658:	e7e5      	b.n	8000626 <main+0x2e>
 800065a:	bf00      	nop
 800065c:	2000001c 	.word	0x2000001c
 8000660:	000186a0 	.word	0x000186a0

08000664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006a4:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006b2:	f7ff ffd7 	bl	8000664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f000 f811 	bl	80006dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ba:	f7ff ff9d 	bl	80005f8 <main>
  bx  lr    
 80006be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006cc:	08000744 	.word	0x08000744
  ldr r2, =_sbss
 80006d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006d4:	20000020 	.word	0x20000020

080006d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <__libc_init_array>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	4d0d      	ldr	r5, [pc, #52]	; (8000714 <__libc_init_array+0x38>)
 80006e0:	4c0d      	ldr	r4, [pc, #52]	; (8000718 <__libc_init_array+0x3c>)
 80006e2:	1b64      	subs	r4, r4, r5
 80006e4:	10a4      	asrs	r4, r4, #2
 80006e6:	2600      	movs	r6, #0
 80006e8:	42a6      	cmp	r6, r4
 80006ea:	d109      	bne.n	8000700 <__libc_init_array+0x24>
 80006ec:	4d0b      	ldr	r5, [pc, #44]	; (800071c <__libc_init_array+0x40>)
 80006ee:	4c0c      	ldr	r4, [pc, #48]	; (8000720 <__libc_init_array+0x44>)
 80006f0:	f000 f818 	bl	8000724 <_init>
 80006f4:	1b64      	subs	r4, r4, r5
 80006f6:	10a4      	asrs	r4, r4, #2
 80006f8:	2600      	movs	r6, #0
 80006fa:	42a6      	cmp	r6, r4
 80006fc:	d105      	bne.n	800070a <__libc_init_array+0x2e>
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f855 3b04 	ldr.w	r3, [r5], #4
 8000704:	4798      	blx	r3
 8000706:	3601      	adds	r6, #1
 8000708:	e7ee      	b.n	80006e8 <__libc_init_array+0xc>
 800070a:	f855 3b04 	ldr.w	r3, [r5], #4
 800070e:	4798      	blx	r3
 8000710:	3601      	adds	r6, #1
 8000712:	e7f2      	b.n	80006fa <__libc_init_array+0x1e>
 8000714:	0800073c 	.word	0x0800073c
 8000718:	0800073c 	.word	0x0800073c
 800071c:	0800073c 	.word	0x0800073c
 8000720:	08000740 	.word	0x08000740

08000724 <_init>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	bf00      	nop
 8000728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800072a:	bc08      	pop	{r3}
 800072c:	469e      	mov	lr, r3
 800072e:	4770      	bx	lr

08000730 <_fini>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr
