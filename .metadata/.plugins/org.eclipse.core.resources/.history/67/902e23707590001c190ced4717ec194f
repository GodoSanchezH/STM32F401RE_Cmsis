/*
 * main.c
 *
 *  Created on: Feb 16, 2022
 *      Author: Godo Sanchez
 */
#include "main.h"
#include "Clock_Config.h"

typedef enum{
	HIGH,
	LOW
}State_GPIO;

void GPIO_Init(void);
void GPIO_Write(bool State_GPIO);

int main(void){

Init_Clock();
GPIO_Init();

for(;;){

	/*
		    actual = entrada();
		    if(actual != anterior)
		    {
		    	delay(30);

		    }
		    anterior = actual;
		   *
		   * */
		  if( !(GPIOC->IDR & (1 << 13)) )
		  {
			  GPIO_Write(HIGH);	//	Enviar PA5 a 1
		  }else
		  {
			  GPIO_Write(LOW);	//	Enviar PA5 a 0
		  }
}

	return 0;
}



void GPIO_Init(void){

/*->>>>>>>>>>> Configuracion Salida <<<<<<<<<<<<<<<<<<<<<<-*/

	 //------	CONFIGURACION COMO SALIDA DEL PIN A5
	  RCC->AHB1ENR |= (1 << 0);				 			//	Habilitamos el clock GPIOA
	  GPIOA->MODER |= (1 << 10);			  			//	Configuración del PIN A5 como salida
	  GPIOA->MODER &= ~(1 << 11);
	  GPIOA->OTYPER &= ~(1 << 5);			 			//	0: Configuracion Output push-pull (reset state)
	  GPIOA->OSPEEDR &= ~(1 << 10) & ~(1 << 11);		//	00: Configuración de la velocidad 2 MHz High speed
	  GPIOA->PUPDR &= ~(1 << 10) & ~(1 << 11);		    //	00: Configuración de resistencias  No pull-up, pull-down

/*->>>>>>>>>>> Configuracion Entradas <<<<<<<<<<<<<<<<<<<<<<-*/

	  //------	CONFIGURACION COMO ENTRADA DEL PIN C13
	    RCC->AHB1ENR |= (1 << 2);								//	1: IO port C clock enabled
	    GPIOC->MODER &= ~( 1 <<  (13)*2 + 0  );					//	00: Input (reset state)
	    GPIOC->MODER &= ~( 1 << ((13)*2 + 1) );
	    GPIOC->PUPDR &= ~( 1 <<  (13)*2 + 0  );					//	00: No pull-up, pull-down
	    GPIOC->PUPDR &= ~( 1 << ((13)*2 + 1) );

}


void GPIO_Write(bool State_GPIO){

	switch(State_GPIO){
	case HIGH:
		GPIOA->ODR |= GPIO_ODR_OD5;
		break;
	case LOW:
		GPIOA->ODR &= ~(GPIO_ODR_OD5);
		break;
	}
}
