/*
 * GPIO.c
 *
 *  Created on: 18 feb. 2022
 *      Author: LENOVO
 */


#include "GPIO.h"

void GPIO_Init(uint8_t port,uint8_t pin,uint8_t dir,uint8_t speed,uint8_t opt)
{
volatile uint32_t * CR;
 uint8_t tPIN = pin;
 uint8_t offset = 0x00;


 //------	CONFIGURACION COMO SALIDA DEL PIN A5


	   &= ~(1<<10) & ~(1<<11);		//	00: Configuración de la velocidad 2 MHz High speed
	  GPIOA->PUPDR &= ~(1<<10) & ~(1<<11);		    //	00: Configuración de resistencias  No pull-up, pull-down

 	 if(pin > 7)
		{
			tPIN -= 8;
			offset = 0x01;
		}

	switch (port) {
		case PA:
			  RCC_AHB1ENR |= (1<<0);			//	Habilitamos el clock GPIOA
			  GPIOA->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida
			  if(dir==1){
				  GPIOA->OTYPER &= ~(1<<pin);	 //Push Pull
				  GPIOA->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
			  }

			break;
		case PB:
			  RCC_AHB1ENR |= (1<<1);			//	Habilitamos el clock GPIOB
			  GPIOB->MODER |= ( 1 << (dir)+2*pin); //Habilitamos el Modo de Salida o entrada
			  if(dir==1){
			 				  GPIOB->OTYPER &= ~(1<<pin);	 //Push Pull
			 				  GPIOB->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
			 			  }
			  break;
		case PC:
			 RCC_AHB1ENR |= (1<<2);			    //	Habilitamos el clock GPIOC
			 GPIOC->MODER |= ( 1 << (dir)+2*pin); //Habilitamos el Modo de Salida o entrada
			 if(dir==1){
							  GPIOC->OTYPER &= ~(1<<pin);	 //Push Pull
							  GPIOC->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
						  }
		break;

	}

			CR = (volatile unsigned long *) (&GPIO_A + offset);


			RCC_AHB1RSTR |= 2; //// Enabling PORT B
			CR = (volatile unsigned long *) (&GPIO_B + offset);
			RCC_AHB1RSTR |= 4; //// Enabling PORT C
			CR = (volatile unsigned long *) (&GPIO_C + offset);


		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
}

int Read_GPIO(uint8_t port,uint8_t pin)
{
	volatile unsigned long * IDR;
	unsigned long offset = 0x02;
	int state;

	if(port == 1)
		{
			IDR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
		{
			IDR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
	{
		IDR = (volatile unsigned long *) (&GPIO_C + offset);
	}
	state = ((*IDR & (1<<pin))>>pin);
	return state;
}

void Write_GPIO(uint8_t port,uint8_t pin,uint8_t state)
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
}

void Toggle_GPIO(uint8_t port,uint8_t pin)
{
	if (Read_GPIO(port,pin))
		{
		Write_GPIO(port,pin,0);
		}
	else
		{
		Write_GPIO(port,pin,1);
		}
}


