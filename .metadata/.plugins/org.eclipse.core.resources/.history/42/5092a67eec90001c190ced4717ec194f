/*
 * GPIO.c
 *
 *  Created on: 18 feb. 2022
 *      Author: LENOVO
 */


#include "GPIO.h"

void GPIO_Init(uint8_t port,uint8_t pin,uint8_t dir,uint8_t speed,uint8_t opt)
{

	switch (port) {
		case PA:
			  RCC_AHB1ENR |= (1<<0);			//	Habilitamos el clock GPIOA
			  GPIOA->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida
			  if(dir==1){
				  GPIOA->OTYPER &= ~(1<<pin);	 //Push Pull
				  GPIOA->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
			  }
			  GPIOA->PUPDR |= (opt<<(2*pin));

			break;
		case PB:
			  RCC_AHB1ENR |= (1<<1);			//	Habilitamos el clock GPIOB
			  GPIOB->MODER |= ( 1 << (dir)+2*pin); //Habilitamos el Modo de Salida o entrada
			  if(dir==1){
			 			GPIOB->OTYPER &= ~(1<<pin);	 //Push Pull
			 			GPIOB->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
			 		    }
			  GPIOB->PUPDR |= (opt<<(2*pin));
			  break;
		case PC:
			 RCC_AHB1ENR |= (1<<2);			    //	Habilitamos el clock GPIOC
			 GPIOC->MODER |= ( 1 << (dir)+2*pin); //Habilitamos el Modo de Salida o entrada
			 if(dir==1){
						GPIOC->OTYPER &= ~(1<<pin);	 //Push Pull
						GPIOC->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
					    }
			 GPIOC->PUPDR |= (opt<<(2*pin));
		break;

	}
}

int Read_GPIO(uint8_t port,uint8_t pin)
{

switch (port) {

	case PA:


		break;

	case PB:

		break;

	case PC:

	    break;

}

}

void Write_GPIO(uint8_t port,uint8_t pin,uint8_t state)
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
}

void Toggle_GPIO(uint8_t port,uint8_t pin)
{
	if (Read_GPIO(port,pin))
		{
		Write_GPIO(port,pin,0);
		}
	else
		{
		Write_GPIO(port,pin,1);
		}
}


