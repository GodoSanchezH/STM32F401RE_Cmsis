
Projecto4_HSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000054c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e0  080006e8  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e0  080006e0  000106e8  2**0
                  CONTENTS
  4 .ARM          00000000  080006e0  080006e0  000106e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e0  080006e8  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006e8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f74  00000000  00000000  00010718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000660  00000000  00000000  0001268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00012cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00012dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed1d  00000000  00000000  00012e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a81  00000000  00000000  00021b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053681  00000000  00000000  000235e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00076c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b8  00000000  00000000  00076cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006c8 	.word	0x080006c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006c8 	.word	0x080006c8

080001d4 <Init_Clock_HSI>:
 RCC->CFGR &= ~(RCC_CFGR_PPRE2);


}

void Init_Clock_HSI(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	  FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001de:	f023 0307 	bic.w	r3, r3, #7
 80001e2:	6013      	str	r3, [r2, #0]
	  FLASH->ACR |= FLASH_ACR_LATENCY_0WS; //~(1 << 2) & ~(1 << 1) & ~(1 << 0);//	000: Zero wait state
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001e6:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	6013      	str	r3, [r2, #0]
	  FLASH->ACR |=  (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8);	//  ART Accelerator
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <Init_Clock_HSI+0x4c>)
 80001f2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80001f6:	6013      	str	r3, [r2, #0]
	  RCC->CR |= RCC_CR_HSION;				//	1: HSI oscillator ON
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <Init_Clock_HSI+0x50>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <Init_Clock_HSI+0x50>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
	  while( !(RCC->CR & RCC_CR_HSION) );	//	1: HSI oscillator ready
 8000204:	bf00      	nop
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <Init_Clock_HSI+0x50>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f9      	beq.n	8000206 <Init_Clock_HSI+0x32>


}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40023c00 	.word	0x40023c00
 8000224:	40023800 	.word	0x40023800

08000228 <GPIO_Init>:


#include "GPIO.h"

void GPIO_Init(uint8_t port,uint8_t pin,uint8_t dir,uint8_t speed,uint8_t opt)
{
 8000228:	b490      	push	{r4, r7}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4604      	mov	r4, r0
 8000230:	4608      	mov	r0, r1
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	4623      	mov	r3, r4
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4603      	mov	r3, r0
 800023c:	71bb      	strb	r3, [r7, #6]
 800023e:	460b      	mov	r3, r1
 8000240:	717b      	strb	r3, [r7, #5]
 8000242:	4613      	mov	r3, r2
 8000244:	713b      	strb	r3, [r7, #4]

	switch (port) {
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b03      	cmp	r3, #3
 800024a:	d073      	beq.n	8000334 <GPIO_Init+0x10c>
 800024c:	2b03      	cmp	r3, #3
 800024e:	f300 80a7 	bgt.w	80003a0 <GPIO_Init+0x178>
 8000252:	2b01      	cmp	r3, #1
 8000254:	d002      	beq.n	800025c <GPIO_Init+0x34>
 8000256:	2b02      	cmp	r3, #2
 8000258:	d036      	beq.n	80002c8 <GPIO_Init+0xa0>
					    }
			 GPIOC->PUPDR |= (opt<<(2*pin));
		break;

	}
}
 800025a:	e0a1      	b.n	80003a0 <GPIO_Init+0x178>
			  RCC_AHB1ENR |= (1<<0);			//	Habilitamos el clock GPIOA
 800025c:	4b53      	ldr	r3, [pc, #332]	; (80003ac <GPIO_Init+0x184>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a52      	ldr	r2, [pc, #328]	; (80003ac <GPIO_Init+0x184>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6013      	str	r3, [r2, #0]
			  GPIOA->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida
 8000268:	4b51      	ldr	r3, [pc, #324]	; (80003b0 <GPIO_Init+0x188>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	7979      	ldrb	r1, [r7, #5]
 800026e:	79ba      	ldrb	r2, [r7, #6]
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a4d      	ldr	r2, [pc, #308]	; (80003b0 <GPIO_Init+0x188>)
 800027a:	430b      	orrs	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 800027e:	797b      	ldrb	r3, [r7, #5]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d115      	bne.n	80002b0 <GPIO_Init+0x88>
				  GPIOA->OTYPER &= ~(1<<pin);	 //Push Pull
 8000284:	4b4a      	ldr	r3, [pc, #296]	; (80003b0 <GPIO_Init+0x188>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	2101      	movs	r1, #1
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	43d2      	mvns	r2, r2
 8000292:	4611      	mov	r1, r2
 8000294:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_Init+0x188>)
 8000296:	400b      	ands	r3, r1
 8000298:	6053      	str	r3, [r2, #4]
				  GPIOA->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 800029a:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <GPIO_Init+0x188>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	7939      	ldrb	r1, [r7, #4]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	0052      	lsls	r2, r2, #1
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a41      	ldr	r2, [pc, #260]	; (80003b0 <GPIO_Init+0x188>)
 80002ac:	430b      	orrs	r3, r1
 80002ae:	6093      	str	r3, [r2, #8]
			  GPIOA->PUPDR |= (opt<<(2*pin));
 80002b0:	4b3f      	ldr	r3, [pc, #252]	; (80003b0 <GPIO_Init+0x188>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	7c39      	ldrb	r1, [r7, #16]
 80002b6:	79ba      	ldrb	r2, [r7, #6]
 80002b8:	0052      	lsls	r2, r2, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <GPIO_Init+0x188>)
 80002c2:	430b      	orrs	r3, r1
 80002c4:	60d3      	str	r3, [r2, #12]
			break;
 80002c6:	e06b      	b.n	80003a0 <GPIO_Init+0x178>
			  RCC_AHB1ENR |= (1<<1);			//	Habilitamos el clock GPIOB
 80002c8:	4b38      	ldr	r3, [pc, #224]	; (80003ac <GPIO_Init+0x184>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a37      	ldr	r2, [pc, #220]	; (80003ac <GPIO_Init+0x184>)
 80002ce:	f043 0302 	orr.w	r3, r3, #2
 80002d2:	6013      	str	r3, [r2, #0]
			  GPIOB->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 80002d4:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <GPIO_Init+0x18c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	7979      	ldrb	r1, [r7, #5]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0052      	lsls	r2, r2, #1
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a33      	ldr	r2, [pc, #204]	; (80003b4 <GPIO_Init+0x18c>)
 80002e6:	430b      	orrs	r3, r1
 80002e8:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 80002ea:	797b      	ldrb	r3, [r7, #5]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d115      	bne.n	800031c <GPIO_Init+0xf4>
			 			GPIOB->OTYPER &= ~(1<<pin);	 //Push Pull
 80002f0:	4b30      	ldr	r3, [pc, #192]	; (80003b4 <GPIO_Init+0x18c>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	79ba      	ldrb	r2, [r7, #6]
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	43d2      	mvns	r2, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	4a2c      	ldr	r2, [pc, #176]	; (80003b4 <GPIO_Init+0x18c>)
 8000302:	400b      	ands	r3, r1
 8000304:	6053      	str	r3, [r2, #4]
			 			GPIOB->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 8000306:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <GPIO_Init+0x18c>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	7939      	ldrb	r1, [r7, #4]
 800030c:	79ba      	ldrb	r2, [r7, #6]
 800030e:	0052      	lsls	r2, r2, #1
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <GPIO_Init+0x18c>)
 8000318:	430b      	orrs	r3, r1
 800031a:	6093      	str	r3, [r2, #8]
			  GPIOB->PUPDR |= (opt<<(2*pin));
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <GPIO_Init+0x18c>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	7c39      	ldrb	r1, [r7, #16]
 8000322:	79ba      	ldrb	r2, [r7, #6]
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	fa01 f202 	lsl.w	r2, r1, r2
 800032a:	4611      	mov	r1, r2
 800032c:	4a21      	ldr	r2, [pc, #132]	; (80003b4 <GPIO_Init+0x18c>)
 800032e:	430b      	orrs	r3, r1
 8000330:	60d3      	str	r3, [r2, #12]
			  break;
 8000332:	e035      	b.n	80003a0 <GPIO_Init+0x178>
			 RCC_AHB1ENR |= (1<<2);			    //	Habilitamos el clock GPIOC
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <GPIO_Init+0x184>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <GPIO_Init+0x184>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6013      	str	r3, [r2, #0]
			 GPIOC->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <GPIO_Init+0x190>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0052      	lsls	r2, r2, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a19      	ldr	r2, [pc, #100]	; (80003b8 <GPIO_Init+0x190>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
			 if(dir==1){
 8000356:	797b      	ldrb	r3, [r7, #5]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d115      	bne.n	8000388 <GPIO_Init+0x160>
						GPIOC->OTYPER &= ~(1<<pin);	 //Push Pull
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <GPIO_Init+0x190>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	2101      	movs	r1, #1
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	43d2      	mvns	r2, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <GPIO_Init+0x190>)
 800036e:	400b      	ands	r3, r1
 8000370:	6053      	str	r3, [r2, #4]
						GPIOC->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <GPIO_Init+0x190>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	7939      	ldrb	r1, [r7, #4]
 8000378:	79ba      	ldrb	r2, [r7, #6]
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	4611      	mov	r1, r2
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <GPIO_Init+0x190>)
 8000384:	430b      	orrs	r3, r1
 8000386:	6093      	str	r3, [r2, #8]
			 GPIOC->PUPDR |= (opt<<(2*pin));
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <GPIO_Init+0x190>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	7c39      	ldrb	r1, [r7, #16]
 800038e:	79ba      	ldrb	r2, [r7, #6]
 8000390:	0052      	lsls	r2, r2, #1
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	4611      	mov	r1, r2
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <GPIO_Init+0x190>)
 800039a:	430b      	orrs	r3, r1
 800039c:	60d3      	str	r3, [r2, #12]
		break;
 800039e:	bf00      	nop
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc90      	pop	{r4, r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40023830 	.word	0x40023830
 80003b0:	40020000 	.word	0x40020000
 80003b4:	40020400 	.word	0x40020400
 80003b8:	40020800 	.word	0x40020800

080003bc <Read_GPIO>:

int Read_GPIO(uint8_t port,uint8_t pin)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	int state;

	switch (port){
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d018      	beq.n	8000404 <Read_GPIO+0x48>
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	dc1f      	bgt.n	8000416 <Read_GPIO+0x5a>
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d002      	beq.n	80003e0 <Read_GPIO+0x24>
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d009      	beq.n	80003f2 <Read_GPIO+0x36>
 80003de:	e01a      	b.n	8000416 <Read_GPIO+0x5a>

		case PA:

			state = (GPIOA->IDR & (1<<pin));
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <Read_GPIO+0x68>)
 80003e2:	691b      	ldr	r3, [r3, #16]
 80003e4:	79ba      	ldrb	r2, [r7, #6]
 80003e6:	2101      	movs	r1, #1
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	4013      	ands	r3, r2
 80003ee:	60fb      	str	r3, [r7, #12]
			break;
 80003f0:	e011      	b.n	8000416 <Read_GPIO+0x5a>

		case PB:

			state = (GPIOC->IDR & (1<<pin));
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <Read_GPIO+0x6c>)
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	79ba      	ldrb	r2, [r7, #6]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
			break;
 8000402:	e008      	b.n	8000416 <Read_GPIO+0x5a>

		case PC:

			state = (GPIOC->IDR & (1<<pin));
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <Read_GPIO+0x6c>)
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	79ba      	ldrb	r2, [r7, #6]
 800040a:	2101      	movs	r1, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	4013      	ands	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]
			break;
 8000414:	bf00      	nop

				}

return state;
 8000416:	68fb      	ldr	r3, [r7, #12]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40020000 	.word	0x40020000
 8000428:	40020800 	.word	0x40020800

0800042c <Write_GPIO>:

void Write_GPIO(uint8_t port,uint8_t pin,uint8_t state)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
 8000436:	460b      	mov	r3, r1
 8000438:	71bb      	strb	r3, [r7, #6]
 800043a:	4613      	mov	r3, r2
 800043c:	717b      	strb	r3, [r7, #5]

	switch (port){
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b03      	cmp	r3, #3
 8000442:	d042      	beq.n	80004ca <Write_GPIO+0x9e>
 8000444:	2b03      	cmp	r3, #3
 8000446:	dc5e      	bgt.n	8000506 <Write_GPIO+0xda>
 8000448:	2b01      	cmp	r3, #1
 800044a:	d002      	beq.n	8000452 <Write_GPIO+0x26>
 800044c:	2b02      	cmp	r3, #2
 800044e:	d01e      	beq.n	800048e <Write_GPIO+0x62>
					 break;
						}
			break;

			}
}
 8000450:	e059      	b.n	8000506 <Write_GPIO+0xda>
			switch(state){
 8000452:	797b      	ldrb	r3, [r7, #5]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d002      	beq.n	800045e <Write_GPIO+0x32>
 8000458:	2b01      	cmp	r3, #1
 800045a:	d00b      	beq.n	8000474 <Write_GPIO+0x48>
			break;
 800045c:	e053      	b.n	8000506 <Write_GPIO+0xda>
					GPIOA->ODR |= (1<<pin);
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <Write_GPIO+0xe8>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	2101      	movs	r1, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a29      	ldr	r2, [pc, #164]	; (8000514 <Write_GPIO+0xe8>)
 800046e:	430b      	orrs	r3, r1
 8000470:	6153      	str	r3, [r2, #20]
					break;
 8000472:	e00b      	b.n	800048c <Write_GPIO+0x60>
					GPIOA->ODR &= ~(1<<pin);
 8000474:	4b27      	ldr	r3, [pc, #156]	; (8000514 <Write_GPIO+0xe8>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	79ba      	ldrb	r2, [r7, #6]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	43d2      	mvns	r2, r2
 8000482:	4611      	mov	r1, r2
 8000484:	4a23      	ldr	r2, [pc, #140]	; (8000514 <Write_GPIO+0xe8>)
 8000486:	400b      	ands	r3, r1
 8000488:	6153      	str	r3, [r2, #20]
					break;
 800048a:	bf00      	nop
			break;
 800048c:	e03b      	b.n	8000506 <Write_GPIO+0xda>
			switch(state){
 800048e:	797b      	ldrb	r3, [r7, #5]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <Write_GPIO+0x6e>
 8000494:	2b01      	cmp	r3, #1
 8000496:	d00b      	beq.n	80004b0 <Write_GPIO+0x84>
			break;
 8000498:	e035      	b.n	8000506 <Write_GPIO+0xda>
					GPIOB->ODR |= (1<<pin);
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <Write_GPIO+0xec>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	79ba      	ldrb	r2, [r7, #6]
 80004a0:	2101      	movs	r1, #1
 80004a2:	fa01 f202 	lsl.w	r2, r1, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <Write_GPIO+0xec>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	6153      	str	r3, [r2, #20]
					break;
 80004ae:	e00b      	b.n	80004c8 <Write_GPIO+0x9c>
					GPIOB->ODR &= ~(1<<pin);
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <Write_GPIO+0xec>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	79ba      	ldrb	r2, [r7, #6]
 80004b6:	2101      	movs	r1, #1
 80004b8:	fa01 f202 	lsl.w	r2, r1, r2
 80004bc:	43d2      	mvns	r2, r2
 80004be:	4611      	mov	r1, r2
 80004c0:	4a15      	ldr	r2, [pc, #84]	; (8000518 <Write_GPIO+0xec>)
 80004c2:	400b      	ands	r3, r1
 80004c4:	6153      	str	r3, [r2, #20]
					break;
 80004c6:	bf00      	nop
			break;
 80004c8:	e01d      	b.n	8000506 <Write_GPIO+0xda>
			switch(state){
 80004ca:	797b      	ldrb	r3, [r7, #5]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d002      	beq.n	80004d6 <Write_GPIO+0xaa>
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d00b      	beq.n	80004ec <Write_GPIO+0xc0>
			break;
 80004d4:	e016      	b.n	8000504 <Write_GPIO+0xd8>
					 GPIOC->ODR |= (1<<pin);
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <Write_GPIO+0xf0>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	79ba      	ldrb	r2, [r7, #6]
 80004dc:	2101      	movs	r1, #1
 80004de:	fa01 f202 	lsl.w	r2, r1, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <Write_GPIO+0xf0>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6153      	str	r3, [r2, #20]
					 break;
 80004ea:	e00b      	b.n	8000504 <Write_GPIO+0xd8>
					 GPIOC->ODR &= ~(1<<pin);
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <Write_GPIO+0xf0>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	79ba      	ldrb	r2, [r7, #6]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	43d2      	mvns	r2, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <Write_GPIO+0xf0>)
 80004fe:	400b      	ands	r3, r1
 8000500:	6153      	str	r3, [r2, #20]
					 break;
 8000502:	bf00      	nop
			break;
 8000504:	bf00      	nop
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000
 8000518:	40020400 	.word	0x40020400
 800051c:	40020800 	.word	0x40020800

08000520 <Toggle_GPIO>:

void Toggle_GPIO(uint8_t port,uint8_t pin)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	switch (port) {
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	2b03      	cmp	r3, #3
 8000534:	d01c      	beq.n	8000570 <Toggle_GPIO+0x50>
 8000536:	2b03      	cmp	r3, #3
 8000538:	dc25      	bgt.n	8000586 <Toggle_GPIO+0x66>
 800053a:	2b01      	cmp	r3, #1
 800053c:	d002      	beq.n	8000544 <Toggle_GPIO+0x24>
 800053e:	2b02      	cmp	r3, #2
 8000540:	d00b      	beq.n	800055a <Toggle_GPIO+0x3a>
		case PC:
			GPIOC->ODR ^= (1<<pin);
			break;

	}
}
 8000542:	e020      	b.n	8000586 <Toggle_GPIO+0x66>
			GPIOA->ODR ^= (1<<pin);
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <Toggle_GPIO+0x74>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	2101      	movs	r1, #1
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a10      	ldr	r2, [pc, #64]	; (8000594 <Toggle_GPIO+0x74>)
 8000554:	404b      	eors	r3, r1
 8000556:	6153      	str	r3, [r2, #20]
			break;
 8000558:	e015      	b.n	8000586 <Toggle_GPIO+0x66>
			GPIOB->ODR ^= (1<<pin);
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <Toggle_GPIO+0x78>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	79ba      	ldrb	r2, [r7, #6]
 8000560:	2101      	movs	r1, #1
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <Toggle_GPIO+0x78>)
 800056a:	404b      	eors	r3, r1
 800056c:	6153      	str	r3, [r2, #20]
			break;
 800056e:	e00a      	b.n	8000586 <Toggle_GPIO+0x66>
			GPIOC->ODR ^= (1<<pin);
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <Toggle_GPIO+0x7c>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	2101      	movs	r1, #1
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <Toggle_GPIO+0x7c>)
 8000580:	404b      	eors	r3, r1
 8000582:	6153      	str	r3, [r2, #20]
			break;
 8000584:	bf00      	nop
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40020000 	.word	0x40020000
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800

080005a0 <main>:
#include "Clock_Config.h"
#include "GPIO.h"



int main(void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8

//Init_Clock_HSE();
Init_Clock_HSI();
 80005a6:	f7ff fe15 	bl	80001d4 <Init_Clock_HSI>
GPIO_Init(PA, 5,Output,OUT2,No_pull_up_pull_down);
 80005aa:	2300      	movs	r3, #0
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	2201      	movs	r2, #1
 80005b2:	2105      	movs	r1, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff fe37 	bl	8000228 <GPIO_Init>
GPIO_Init(PC, 13,Input, OUT2, No_pull_up_pull_down);
 80005ba:	2300      	movs	r3, #0
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	210d      	movs	r1, #13
 80005c4:	2003      	movs	r0, #3
 80005c6:	f7ff fe2f 	bl	8000228 <GPIO_Init>

		  if(!(GPIOC->IDR & (1<<13))) GPIO_Write(HIGH);	//	PA5 -> HIGH

		  else  GPIO_Write(LOW);						//	PA5 -> LOW
*/
	if(!Read_GPIO(PC,13)){
 80005ca:	210d      	movs	r1, #13
 80005cc:	2003      	movs	r0, #3
 80005ce:	f7ff fef5 	bl	80003bc <Read_GPIO>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10e      	bne.n	80005f6 <main+0x56>
		Toggle_GPIO(PA, 5);
 80005d8:	2105      	movs	r1, #5
 80005da:	2001      	movs	r0, #1
 80005dc:	f7ff ffa0 	bl	8000520 <Toggle_GPIO>
		for (uint32_t var = 0; var <=100000; var++);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	e002      	b.n	80005ec <main+0x4c>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <main+0x64>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d9f8      	bls.n	80005e6 <main+0x46>
 80005f4:	e7e9      	b.n	80005ca <main+0x2a>
	}
	else Write_GPIO(PA, 5, LOW);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2105      	movs	r1, #5
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff ff16 	bl	800042c <Write_GPIO>
	if(!Read_GPIO(PC,13)){
 8000600:	e7e3      	b.n	80005ca <main+0x2a>
 8000602:	bf00      	nop
 8000604:	000186a0 	.word	0x000186a0

08000608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <SystemInit+0x20>)
 800060e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <SystemInit+0x20>)
 8000614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800062c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000648:	4c0b      	ldr	r4, [pc, #44]	; (8000678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000656:	f7ff ffd7 	bl	8000608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065a:	f000 f811 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800065e:	f7ff ff9f 	bl	80005a0 <main>
  bx  lr    
 8000662:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000664:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000670:	080006e8 	.word	0x080006e8
  ldr r2, =_sbss
 8000674:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000678:	2000001c 	.word	0x2000001c

0800067c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC_IRQHandler>
	...

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4d0d      	ldr	r5, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1b64      	subs	r4, r4, r5
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2600      	movs	r6, #0
 800068c:	42a6      	cmp	r6, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4d0b      	ldr	r5, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 f818 	bl	80006c8 <_init>
 8000698:	1b64      	subs	r4, r4, r5
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2600      	movs	r6, #0
 800069e:	42a6      	cmp	r6, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a8:	4798      	blx	r3
 80006aa:	3601      	adds	r6, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b2:	4798      	blx	r3
 80006b4:	3601      	adds	r6, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	080006e0 	.word	0x080006e0
 80006bc:	080006e0 	.word	0x080006e0
 80006c0:	080006e0 	.word	0x080006e0
 80006c4:	080006e4 	.word	0x080006e4

080006c8 <_init>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

080006d4 <_fini>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr
